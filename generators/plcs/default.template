package plc

import (
	"log"
	"time"

	cif "github.com/fops9311/go_plc_worker_generator/cachedinterface"
	{{range $val := .ComDrivers}}{{$val}} "github.com/fops9311/go_plc_worker_generator/drivers/{{$val}}"
	{{end}}
)

type {{.TypeName | ToUpper}} struct {
	{{range $val := .Inputs}}{{$val.Name}} cif.CI{{$val.Type}};
	{{end}}
	{{range $val := .Outputs}}{{$val.Name}} cif.CI{{$val.Type}};
	{{end}}
	StateStartTime time.Time
	tickInterval100ms int
}

func NewPLC_{{.TypeName | ToUpper}}(tickInterval100ms int) *{{.TypeName | ToUpper}} {
	return &{{.TypeName  | ToUpper}}{
		{{range $val := .Inputs}}{{$val.Name}}: cif.CI{{$val.Type}}{
			Value: {{$val.Value}},
			Get: {{$val.ComDriver}}.LinkInput{{$val.Type}}("{{$val.ComDriverLinkId}}",{{$val.Value}}),//func(){{$val.Type}}{return {{$val.Value}}},
			},
		{{end}}
		{{range $val := .Outputs}}{{$val.Name}}:  cif.CI{{$val.Type}}{
			Value: {{$val.Value}},
			Set: {{$val.ComDriver}}.LinkOutput{{$val.Type}}("{{$val.ComDriverLinkId}}"),//func(v {{$val.Type}}){log.Print("Set {{$val.Name}} = ");fmt.Println(v)},
			},
		{{end}}
		StateStartTime: time.Now(),
		tickInterval100ms:tickInterval100ms,
	}
}
func (plc *{{.TypeName | ToUpper}}) readInputs() {
	{{range $val := .Inputs}}plc.{{$val.Name}}.ReadChan()
	{{end}}
}
func (plc *{{.TypeName | ToUpper}}) writeOutputs() {
	{{range $val := .Outputs}}plc.{{$val.Name}}.WriteChan()
	{{end}}
}
func (plc *{{.TypeName | ToUpper}}) tick() {
	plc.readInputs()
	plc.logic()
	plc.writeOutputs()
}
func (plc *{{.TypeName | ToUpper}}) logic() {
	switch plc.State.Value {
	{{range $state := .States}}
	case {{$state.Id}}: // {{$state.Comment}}
		{{range $outs := $state.OutputVector}}plc.{{$outs.Name}}.Value = {{$outs.Value}}
		{{end}}
		{{range $statechanges := $state.StateChangeCondition}}if ({{$statechanges.Condition}}){ plc.State.Value = {{$statechanges.Destination}}; plc.resetStateTimer()} 
		{{end}}
	{{end}}
	default:
		plc.State.Value = {{.DefaultStateId}}
	}
}
func (plc *{{.TypeName | ToUpper}}) resetStateTimer() {
	log.Printf("%s passed. state changed to %d", time.Now().Sub(plc.StateStartTime),plc.State.Value)
	plc.StateStartTime = time.Now()
}
func (plc *TEST_UNIT0) Start() {
	for {
		plc.tick()
		<-time.NewTimer(time.Millisecond * time.Duration(plc.tickInterval100ms*100)).C
	}
}